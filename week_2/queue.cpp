# include <iostream>
# include <vector>
# include <string>
# include <algorithm> 
using namespace std;


/*
Люди стоят в очереди, но никогда не уходят из её начала,
зато могут приходить в конец и уходить оттуда. Более того,
иногда некоторые люди могут прекращать и начинать беспокоиться
из-за того, что очередь не продвигается.

Реализуйте обработку следующих операций над очередью:

WORRY i: пометить i-го человека с начала очереди (в нумерации с 0) как беспокоящегося;
QUIET i: пометить i-го человека как успокоившегося;
COME k: добавить k спокойных человек в конец очереди;
COME -k: убрать k человек из конца очереди;
WORRY_COUNT: узнать количество беспокоящихся людей в очереди.
Изначально очередь пуста.

Формат ввода
Количество операций Q, затем описания операций.
Для каждой операции WORRY i и QUIET i гарантируется,
что человек с номером i существует в очереди на момент операции.
Для каждой операции COME -k гарантируется, что k не больше текущего размера очереди.

Формат вывода
Для каждой операции WORRY_COUNT выведите одно целое число — количество беспокоящихся людей в очереди.
*/


int main() {
    int q, input;
    vector<int> queue;
    string enter;
    cin >> q;
    for (int i = 0; i < q; ++i){
        cin >> enter;
        if (enter == "WORRY" || enter == "QUIET") {
            cin >> input;
            queue[input] = (enter == "WORRY");
        }
        if (enter == "COME") {
            cin >> input;
            queue.resize(queue.size() + input, 0);
        }
        if (enter == "WORRY_COUNT") {
            cout << count(begin(queue), end(queue), 1) << endl;
        }    
    }
    return 0;
}